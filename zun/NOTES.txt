{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- $envAll := . }}
{{- $apiServiceName := tuple "container" "internal" . | include "helm-toolkit.endpoints.hostname_short_endpoint_lookup" }}
{{- $wsproxyServiceName := tuple "websocket_proxy" "internal" . | include "helm-toolkit.endpoints.hostname_short_endpoint_lookup" }}

===============================================================================
=                         Zun Container Service                               =
===============================================================================

üéâ Zun has been successfully deployed!

üìã Deployment Summary:
-------------------
  Release Name:      {{ .Release.Name }}
  Release Namespace: {{ .Release.Namespace }}
  Chart Version:     {{ .Chart.Version }}
  Zun Version:       2025.1

üöÄ Services Deployed:
------------------
{{- if .Values.manifests.deployment_api }}
  ‚úÖ Zun API Service
     - Replicas: {{ .Values.pod.replicas.api }}
     - Internal Service: {{ $apiServiceName }}:{{ tuple "container" "service" "api" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
{{- if .Values.network.container.ingress.public }}
     - Public Endpoint: {{ tuple "container" "public" "api" . | include "helm-toolkit.endpoints.endpoint_uri_lookup" }}
{{- end }}
{{- end }}

{{- if .Values.manifests.deployment_wsproxy }}
  ‚úÖ WebSocket Proxy Service
     - Replicas: {{ .Values.pod.replicas.wsproxy }}
     - Internal Service: {{ $wsproxyServiceName }}:{{ tuple "websocket_proxy" "service" "wsproxy" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
{{- if .Values.network.websocket_proxy.ingress.public }}
     - Public Endpoint: {{ tuple "websocket_proxy" "public" "wsproxy" . | include "helm-toolkit.endpoints.endpoint_uri_lookup" }}
{{- end }}
{{- end }}

{{- if .Values.manifests.daemonset_compute }}
  ‚úÖ Zun Compute Service (DaemonSet)
     - Runs on nodes with label: {{ .Values.labels.compute.node_selector_key }}={{ .Values.labels.compute.node_selector_value }}
     - Privileged mode: Enabled for Docker access
{{- end }}

{{- if .Values.manifests.daemonset_cni_daemon }}
  ‚úÖ Zun CNI Daemon (DaemonSet)
     - Runs on nodes with label: {{ .Values.labels.cni_daemon.node_selector_key }}={{ .Values.labels.cni_daemon.node_selector_value }}
     - Manages container networking
{{- end }}

üîó Getting Started:
----------------
1. Verify the deployment status:
   kubectl get pods -n {{ .Release.Namespace }} -l application=zun

2. Check service endpoints:
   kubectl get svc -n {{ .Release.Namespace }} -l application=zun

3. View Zun API logs:
   kubectl logs -n {{ .Release.Namespace }} -l component=api -c zun-api

4. Check compute node status:
   kubectl get pods -n {{ .Release.Namespace }} -l component=compute -o wide

üîß Configuration:
---------------
{{- if .Values.conf.zun.network.driver }}
  - Network Driver: {{ .Values.conf.zun.network.driver }}
{{- end }}
{{- if .Values.conf.zun.docker.docker_remote_api_host }}
  - Docker Socket: {{ .Values.conf.zun.docker.docker_remote_api_host }}
{{- end }}
  - Database: {{ tuple "oslo_db" "internal" "zun" "mysql" . | include "helm-toolkit.endpoints.authenticated_endpoint_uri_lookup" | replace "mysql+pymysql://" "" | replace "/zun" "" }}
  - Message Queue: {{ tuple "oslo_messaging" "internal" "zun" "amqp" . | include "helm-toolkit.endpoints.authenticated_transport_endpoint_uri_lookup" | replace "rabbit://" "" }}

üîç Useful Commands:
-----------------
# Check Zun service status
openstack container service list

# List containers
openstack appcontainer list

# Create a test container
openstack appcontainer create --name test-container --image cirros

# Check container logs
openstack appcontainer logs test-container

# Access container console (WebSocket)
openstack appcontainer exec test-container

üìö Documentation:
---------------
- Zun Documentation: https://docs.openstack.org/zun/latest/
- OpenStack CLI: https://docs.openstack.org/python-openstackclient/latest/

‚ö†Ô∏è  Important Notes:
-----------------
{{- if .Values.manifests.daemonset_compute }}
- Zun Compute pods run in privileged mode with access to Docker socket
- Ensure compute nodes have Docker installed and running
{{- end }}
{{- if .Values.manifests.daemonset_cni_daemon }}
- CNI daemon requires proper network configuration
- Verify CNI plugins are available in /opt/cni/bin/
{{- end }}
- Monitor pod resource usage, especially on compute nodes
- Check security policies if using Pod Security Standards

üÜò Troubleshooting:
-----------------
# Check pod events
kubectl describe pods -n {{ .Release.Namespace }} -l application=zun

# View compute logs
kubectl logs -n {{ .Release.Namespace }} -l component=compute -c zun-compute --tail=100

# Test Docker access from compute pod
kubectl exec -n {{ .Release.Namespace }} -it <compute-pod-name> -- docker version

# Check CNI daemon status
kubectl logs -n {{ .Release.Namespace }} -l component=cni-daemon -c zun-cni-daemon --tail=100

Happy Container Orchestration! üê≥