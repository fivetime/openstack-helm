{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- if .Values.manifests.daemonset_compute }}
{{- $envAll := . }}

{{- $mounts_zun_compute := .Values.pod.mounts.zun_compute.zun_compute }}
{{- $mounts_zun_compute_init := .Values.pod.mounts.zun_compute.init_container }}

{{- $serviceAccountName := "zun-compute" }}
{{ tuple $envAll "compute" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: zun-compute
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 4 }}
spec:
  selector:
    matchLabels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 6 }}
{{ tuple $envAll "compute" | include "helm-toolkit.snippets.kubernetes_upgrades_daemonset" | indent 2 }}
  template:
    metadata:
      labels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-etc-hash: {{ tuple "configmap-etc.yaml" . | include "helm-toolkit.utils.hash" }}
{{ tuple "zun_compute" . | include "helm-toolkit.snippets.custom_pod_annotations" | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName }}
{{ dict "envAll" $envAll "application" "zun_compute" | include "helm-toolkit.snippets.kubernetes_pod_security_context" | indent 6 }}
      nodeSelector:
        {{ .Values.labels.compute.node_selector_key }}: {{ .Values.labels.compute.node_selector_value }}
{{- if .Values.pod.tolerations.zun.enabled }}
{{ tuple $envAll "zun" | include "helm-toolkit.snippets.kubernetes_tolerations" | indent 6 }}
{{- end }}
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: {{ .Values.pod.lifecycle.termination_grace_period.compute.timeout | default "600" }}
      initContainers:
{{ tuple $envAll "compute" $mounts_zun_compute_init | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
      containers:
        - name: zun-compute
{{ tuple $envAll "zun_compute" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.compute | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
{{ dict "envAll" $envAll "application" "zun_compute" "container" "zun_compute" | include "helm-toolkit.snippets.kubernetes_container_security_context" | indent 10 }}
          command:
            - /tmp/zun-compute.sh
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: pod-tmp
              mountPath: /tmp
            - name: pod-var-zun
              mountPath: /var/lib/zun
            - name: pod-var-log
              mountPath: /var/log
            - name: zun-bin
              mountPath: /tmp/zun-compute.sh
              subPath: zun-compute.sh
              readOnly: true
            - name: zun-etc
              mountPath: /etc/zun/zun.conf
              subPath: zun.conf
              readOnly: true
            - name: zun-etc
              mountPath: /etc/zun/logging.conf
              subPath: logging.conf
              readOnly: true
            # Docker socket and related mounts
            - name: docker-socket
              mountPath: /var/run/docker.sock
            - name: docker-binary
              mountPath: /usr/bin/docker
              readOnly: true
            - name: dev
              mountPath: /dev
            - name: sys-fs-cgroup
              mountPath: /sys/fs/cgroup
              readOnly: true
            - name: var-lib-docker
              mountPath: /var/lib/docker
            - name: run
              mountPath: /run
            - name: var-lib-kubelet
              mountPath: /var/lib/kubelet
              mountPropagation: Bidirectional
{{ if $mounts_zun_compute.volumeMounts }}{{ toYaml $mounts_zun_compute.volumeMounts | indent 12 }}{{ end }}
      volumes:
        - name: pod-tmp
          emptyDir: {}
        - name: pod-var-zun
          emptyDir: {}
        - name: pod-var-log
          emptyDir: {}
        - name: zun-bin
          configMap:
            name: zun-bin
            defaultMode: 0555
        - name: zun-etc
          secret:
            secretName: zun-etc
            defaultMode: 0444
        # Host mounts for Docker and container management
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: docker-binary
          hostPath:
            path: /usr/bin/docker
        - name: dev
          hostPath:
            path: /dev
        - name: sys-fs-cgroup
          hostPath:
            path: /sys/fs/cgroup
        - name: var-lib-docker
          hostPath:
            path: /var/lib/docker
        - name: run
          hostPath:
            path: /run
        - name: var-lib-kubelet
          hostPath:
            path: /var/lib/kubelet
{{ if $mounts_zun_compute.volumes }}{{ toYaml $mounts_zun_compute.volumes | indent 8 }}{{ end }}
{{- end }}