{{/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- if .Values.manifests.daemonset_compute }}
{{- $envAll := . }}

{{- $mounts_zun_compute := .Values.pod.mounts.zun_compute.zun_compute }}
{{- $mounts_zun_compute_init := .Values.pod.mounts.zun_compute.init_container }}

{{- $serviceAccountName := "zun-compute" }}
{{ tuple $envAll "compute" $serviceAccountName | include "helm-toolkit.snippets.kubernetes_pod_rbac_serviceaccount" }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: zun-compute
  annotations:
    {{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" }}
  labels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 4 }}
spec:
  selector:
    matchLabels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 6 }}
{{ tuple $envAll "compute" | include "helm-toolkit.snippets.kubernetes_upgrades_daemonset" | indent 2 }}
  template:
    metadata:
      labels:
{{ tuple $envAll "zun" "compute" | include "helm-toolkit.snippets.kubernetes_metadata_labels" | indent 8 }}
      annotations:
{{ tuple $envAll | include "helm-toolkit.snippets.release_uuid" | indent 8 }}
        configmap-bin-hash: {{ tuple "configmap-bin.yaml" . | include "helm-toolkit.utils.hash" }}
        configmap-etc-hash: {{ tuple "configmap-etc.yaml" . | include "helm-toolkit.utils.hash" }}
{{ tuple "zun_compute" . | include "helm-toolkit.snippets.custom_pod_annotations" | indent 8 }}
    spec:
{{ tuple "zun_compute" . | include "helm-toolkit.snippets.kubernetes_pod_priority_class" | indent 6 }}
{{ tuple "zun_compute" . | include "helm-toolkit.snippets.kubernetes_pod_runtime_class" | indent 6 }}
      serviceAccountName: {{ $serviceAccountName }}
      nodeSelector:
        {{ .Values.labels.compute.node_selector_key }}: {{ .Values.labels.compute.node_selector_value }}
{{ if $envAll.Values.pod.tolerations.zun.enabled }}
{{ tuple $envAll "zun" | include "helm-toolkit.snippets.kubernetes_tolerations" | indent 6 }}
{{ end }}
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: {{ .Values.pod.lifecycle.termination_grace_period.compute.timeout | default "60" }}
      initContainers:
{{ tuple $envAll "compute" $mounts_zun_compute_init | include "helm-toolkit.snippets.kubernetes_entrypoint_init_container" | indent 8 }}
      containers:
        - name: zun-compute
{{ tuple $envAll "zun_compute" | include "helm-toolkit.snippets.image" | indent 10 }}
{{ tuple $envAll $envAll.Values.pod.resources.compute | include "helm-toolkit.snippets.kubernetes_resources" | indent 10 }}
          securityContext:
            runAsUser: 0
            privileged: true
            readOnlyRootFilesystem: false
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- if eq .Values.container_runtime.type "docker" }}
            - name: DOCKER_HOST
              value: "unix://{{ .Values.container_runtime.docker.socket_path }}"
            {{- end }}
          command:
            - /tmp/zun-compute.sh
          volumeMounts:
            # ═══════════════════════════════════════════════════════════
            # 基本配置和脚本挂载
            # ═══════════════════════════════════════════════════════════
            - name: pod-tmp
              mountPath: /tmp
            - name: zun-bin
              mountPath: /tmp/zun-compute.sh
              subPath: zun-compute.sh
              readOnly: true
            - name: zun-etc
              mountPath: /etc/zun/zun.conf
              subPath: zun.conf
              readOnly: true
            {{- if .Values.conf.zun.DEFAULT.log_config_append }}
            - name: zun-etc
              mountPath: {{ .Values.conf.zun.DEFAULT.log_config_append }}
              subPath: {{ base .Values.conf.zun.DEFAULT.log_config_append }}
              readOnly: true
            {{- end }}
            - name: zun-etc
              mountPath: /etc/zun/policy.yaml
              subPath: policy.yaml
              readOnly: true
            - name: zun-etc
              mountPath: /etc/zun/rootwrap.conf
              subPath: rootwrap.conf
              readOnly: true
            - name: zun-etc
              mountPath: /etc/zun/rootwrap.d/zun.filters
              subPath: zun.filters
              readOnly: true

            # ═══════════════════════════════════════════════════════════
            # 必要的数据和运行时目录
            # ═══════════════════════════════════════════════════════════
            - name: host-var-lib-zun
              mountPath: /var/lib/zun
            - name: host-var-log
              mountPath: /var/log
            - name: host-run
              mountPath: /var/run

            # ═══════════════════════════════════════════════════════════
            # 容器运行时 socket
            # ═══════════════════════════════════════════════════════════
            {{- if eq .Values.container_runtime.type "docker" }}
            - name: docker-socket
              mountPath: {{ .Values.container_runtime.docker.socket_path }}
            - name: docker-lib
              mountPath: {{ .Values.container_runtime.docker.library_dir }}
              readOnly: true
            {{- else if eq .Values.container_runtime.type "cri" }}
            - name: cri-socket
              mountPath: {{ .Values.container_runtime.cri.socket_path }}
            {{- end }}

            # ═══════════════════════════════════════════════════════════
            # 网络相关（仅在特定网络驱动下）
            # ═══════════════════════════════════════════════════════════
            {{- if eq .Values.network.driver "cni" }}
            - name: cni-bin
              mountPath: {{ .Values.network.drivers.cni.paths.bin_dir }}
              readOnly: true
            - name: cni-conf
              mountPath: {{ .Values.network.drivers.cni.paths.conf_dir }}
              readOnly: true
            {{- end }}

            # ═══════════════════════════════════════════════════════════
            # 用户自定义挂载点
            # ═══════════════════════════════════════════════════════════
{{ if $mounts_zun_compute.volumeMounts }}{{ toYaml $mounts_zun_compute.volumeMounts | indent 12 }}{{ end }}
      volumes:
        # ═══════════════════════════════════════════════════════════
        # 基本配置卷
        # ═══════════════════════════════════════════════════════════
        - name: pod-tmp
          emptyDir: {}
        - name: zun-bin
          configMap:
            name: zun-bin
            defaultMode: 0555
        - name: zun-etc
          secret:
            secretName: zun-etc
            defaultMode: 0444

        # ═══════════════════════════════════════════════════════════
        # 必要的宿主机目录
        # ═══════════════════════════════════════════════════════════
        - name: host-var-lib-zun
          hostPath:
            path: /var/lib/zun
            type: DirectoryOrCreate
        - name: host-var-log
          hostPath:
            path: /var/log
            type: Directory
        - name: host-run
          hostPath:
            path: /var/run
            type: Directory

        # ═══════════════════════════════════════════════════════════
        # 容器运行时 socket
        # ═══════════════════════════════════════════════════════════
        {{- if eq .Values.container_runtime.type "docker" }}
        - name: docker-socket
          hostPath:
            path: {{ .Values.container_runtime.docker.socket_path }}
            type: Socket
        - name: docker-lib
          hostPath:
            path: {{ .Values.container_runtime.docker.library_dir }}
            type: Directory
        {{- else if eq .Values.container_runtime.type "cri" }}
        - name: cri-socket
          hostPath:
            path: {{ .Values.container_runtime.cri.socket_path }}
            type: Socket
        {{- end }}

        # ═══════════════════════════════════════════════════════════
        # CNI 网络插件（仅在 CNI 模式下）
        # ═══════════════════════════════════════════════════════════
        {{- if eq .Values.network.driver "cni" }}
        - name: cni-bin
          hostPath:
            path: {{ .Values.network.drivers.cni.paths.bin_dir }}
            type: DirectoryOrCreate
        - name: cni-conf
          hostPath:
            path: {{ .Values.network.drivers.cni.paths.conf_dir }}
            type: DirectoryOrCreate
        {{- end }}

        # ═══════════════════════════════════════════════════════════
        # 用户自定义卷
        # ═══════════════════════════════════════════════════════════
{{ if $mounts_zun_compute.volumes }}{{ toYaml $mounts_zun_compute.volumes | indent 8 }}{{ end }}
{{- end }}