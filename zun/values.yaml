# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
release_group: null

labels:
  api:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  compute:
    node_selector_key: openstack-compute-node
    node_selector_value: enabled
  cni_daemon:
    node_selector_key: kuryr-libnetwork
    node_selector_value: enabled
  wsproxy:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled
  job:
    node_selector_key: openstack-control-plane
    node_selector_value: enabled

helm3_hook: true

images:
  pull_policy: IfNotPresent
  tags:
    bootstrap: quay.io/airshipit/heat:2025.1-ubuntu_noble
    db_init: quay.io/airshipit/heat:2025.1-ubuntu_noble
    db_drop: quay.io/airshipit/heat:2025.1-ubuntu_noble
    ks_user: quay.io/airshipit/heat:2025.1-ubuntu_noble
    ks_service: quay.io/airshipit/heat:2025.1-ubuntu_noble
    ks_endpoints: quay.io/airshipit/heat:2025.1-ubuntu_noble
    scripted_test: quay.io/airshipit/heat:2025.1-ubuntu_noble

    zun_api: docker.io/kolla/zun-api:2025.1-ubuntu-noble
    zun_db_sync: docker.io/kolla/zun-api:2025.1-ubuntu-noble
    zun_cni_daemon: docker.io/kolla/zun-cni-daemon:2025.1-ubuntu-noble
    zun_compute: docker.io/kolla/zun-compute:2025.1-ubuntu-noble
    zun_wsproxy: docker.io/kolla/zun-wsproxy:2025.1-ubuntu-noble

    rabbit_init: docker.io/rabbitmq:3.13-management
    dep_check: quay.io/airshipit/kubernetes-entrypoint:latest-ubuntu_jammy
  local_registry:
    active: false
    exclude:
      - dep_check
      - image_repo_sync

network:
  docker:
    plugins_dir: /usr/lib/docker/plugins
    socket_path: /var/run/docker.sock
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    external_policy_local: false
    node_port:
      enabled: false
      port: 30511
  wsproxy:
    external_policy_local: false
    node_port:
      enabled: false
      port: 30512

secrets:
  identity:
    admin: zun-keystone-admin
    zun: zun-keystone-user
  oslo_db:
    admin: zun-db-admin
    zun: zun-db-user
  oslo_messaging:
    admin: zun-rabbitmq-admin
    zun: zun-rabbitmq-user
  oci_image_registry:
    zun: zun-oci-image-registry

endpoints:
  cluster_domain_suffix: cluster.local
  local_image_registry:
    name: docker-registry
    namespace: docker-registry
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        node: 5000
  oci_image_registry:
    name: oci-image-registry
    namespace: oci-image-registry
    auth:
      enabled: false
      zun:
        username: zun
        password: password
    hosts:
      default: localhost
      internal: docker-registry
      node: localhost
    host_fqdn_override:
      default: null
    port:
      registry:
        default: 5000
        internal: 5000
        node: 5000
  identity:
    name: keystone
    auth:
      admin:
        region_name: RegionOne
        username: admin
        password: password
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      zun:
        role: admin
        region_name: RegionOne
        username: zun
        password: password
        project_name: service
        user_domain_name: default
        project_domain_name: default
        default_domain_id: default
    hosts:
      default: keystone
      internal: keystone-api
    host_fqdn_override:
      default: null
    path:
      default: /v3
    scheme:
      default: http
    port:
      api:
        default: 80
        internal: 5000
  container:
    name: zun
    hosts:
      default: zun-api
      internal: zun-api
    host_fqdn_override:
      default: null
    path:
      default: /v1
    scheme:
      default: http
    port:
      api:
        default: 9517
        internal: 9517
        service: 9517
  websocket_proxy:
    name: zun-wsproxy
    hosts:
      default: zun-wsproxy
      internal: zun-wsproxy
    host_fqdn_override:
      default: null
    path:
      default: /
    scheme:
      default: http
    port:
      wsproxy:
        default: 6784
        internal: 6784
        service: 6784
  oslo_db:
    auth:
      admin:
        username: root
        password: password
        secret:
          tls:
            internal: mariadb-tls-direct
      zun:
        username: zun
        password: password
        database: zun
    hosts:
      default: mariadb
      internal: mariadb-server
    host_fqdn_override:
      default: null
    path: /zun
    scheme: mysql+pymysql
    port:
      mysql:
        default: 3306
        internal: 3306
  oslo_messaging:
    namespace: null
    auth:
      admin:
        username: rabbitmq
        password: password
        secret:
          tls:
            internal: rabbitmq-tls-direct
      zun:
        username: zun
        password: password
    statefulset:
      replicas: 2
      name: rabbitmq-rabbitmq
    hosts:
      default: rabbitmq
    host_fqdn_override:
      default: null
    path: /zun
    scheme: rabbit
    port:
      amqp:
        default: 5672
      http:
        default: 15672
  oslo_cache:
    auth:
      memcache_secret_key: password
    hosts:
      default: memcached
      internal: memcached
    host_fqdn_override:
      default: null
    port:
      memcache:
        default: 11211
        internal: 11211
  network:
    name: neutron
    hosts:
      default: neutron-server
      internal: neutron-server
    host_fqdn_override:
      default: null
    path:
      default: null
    scheme:
      default: http
    port:
      api:
        default: 9696
        internal: 9696

pod:
  security_context:
    zun:
      pod:
        runAsUser: 42424
      container:
        runAsUser: 0
        readOnlyRootFilesystem: false
  affinity:
    anti:
      type:
        default: preferredDuringSchedulingIgnoredDuringExecution
      topologyKey:
        default: kubernetes.io/hostname
      weight:
        default: 10
  mounts:
    zun_api:
      init_container: null
      zun_api:
        volumeMounts:
        volumes:
    zun_compute:
      init_container: null
      zun_compute:
        volumeMounts:
        volumes:
    zun_cni_daemon:
      init_container: null
      zun_cni_daemon:
        volumeMounts:
        volumes:
    zun_wsproxy:
      init_container: null
      zun_wsproxy:
        volumeMounts:
        volumes:
    zun_db_sync:
      zun_db_sync:
        volumeMounts:
        volumes:
  replicas:
    api: 2
    wsproxy: 2
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
      daemonsets:
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
    disruption_budget:
      api:
        min_available: 0
    termination_grace_period:
      api:
        timeout: 600
      compute:
        timeout: 600
      cni_daemon:
        timeout: 600
      wsproxy:
        timeout: 600
  tolerations:
    zun:
      enabled: false
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
  resources:
    enabled: false
    api:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    compute:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    cni_daemon:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    wsproxy:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_drop:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_endpoints:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_service:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_user:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      rabbit_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      tests:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

dependencies:
  dynamic:
    common:
      local_image_registry:
        jobs:
          - zun-image-repo-sync
        services:
          - endpoint: node
            service: local_image_registry
    rabbit_init:
      services:
        - service: oslo_messaging
          endpoint: internal
  static:
    api:
      jobs:
        - zun-db-sync
        - zun-ks-user
        - zun-ks-service
        - zun-ks-endpoints
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: oslo_messaging
        - endpoint: internal
          service: identity
    compute:
      jobs:
        - zun-db-sync
        - zun-ks-user
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: oslo_messaging
        - endpoint: internal
          service: identity
        - endpoint: internal
          service: network
    cni_daemon:
      jobs:
        - zun-ks-user
      services:
        - endpoint: internal
          service: identity
        - endpoint: internal
          service: network
    wsproxy:
      jobs:
        - zun-db-sync
        - zun-ks-user
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: oslo_messaging
        - endpoint: internal
          service: identity
    db_init:
      services:
        - endpoint: internal
          service: oslo_db
    db_sync:
      jobs:
        - zun-db-init
      services:
        - endpoint: internal
          service: oslo_db
    db_drop:
      services:
        - endpoint: internal
          service: oslo_db
    ks_endpoints:
      jobs:
        - zun-ks-service
      services:
        - endpoint: internal
          service: identity
    ks_service:
      services:
        - endpoint: internal
          service: identity
    ks_user:
      services:
        - endpoint: internal
          service: identity

conf:
  zun:
    DEFAULT:
      debug: true
      log_dir: /var/log/zun
      state_path: /var/lib/zun
      rootwrap_config: /etc/zun/rootwrap.conf
      transport_url: null
      default_log_levels:
        - "docker.client=DEBUG"
        - "zun.container.docker.driver=DEBUG"
        - "zun.network.kuryr_network=DEBUG"
    api:
      host_ip: 0.0.0.0
      port: 9517
      workers: 1
    keystone_authtoken:
      auth_version: v3
      auth_type: password
      memcached_servers: null
      www_authenticate_uri: null
      auth_url: null
      region_name: null
      project_name: null
      project_domain_name: null
      user_domain_name: null
      username: null
      password: null
    keystone_auth:
      auth_type: password
      auth_url: null
      region_name: null
      project_name: null
      project_domain_name: null
      user_domain_name: null
      username: null
      password: null
    database:
      connection: null
      max_retries: -1
    docker:
      docker_remote_api_host: unix:///var/run/docker.sock
      # docker_remote_api_version: "auto"
      docker_remote_api_version: "1.45"
      docker_remote_api_insecure: false
      network_driver: kuryr
      #network_driver: bridge
    neutron_client:
      auth_type: password
      auth_url: null
      region_name: null
      project_name: null
      project_domain_name: null
      user_domain_name: null
      username: null
      password: null
      endpoint_url: null
    websocket_proxy:
      wsproxy_host: 0.0.0.0
      wsproxy_port: 6784
      base_url: ws://localhost:6784/
    compute:
      host_shared_with_nova: false
    cni:
      cni_daemon: true
      cni_daemon_root_helper: sudo zun-rootwrap /etc/zun/rootwrap.conf
  zun_api_paste:
    composite:osapi_container:
      use: call:zun.api:setup_app
    app:container_api:
      paste.app_factory: zun.api.app:app_factory
  logging:
    loggers:
      keys:
        - root
        - zun
    handlers:
      keys:
        - stdout
        - stderr
        - "null"
    formatters:
      keys:
        - context
        - default
    logger_root:
      level: WARNING
      handlers: "null"
    logger_zun:
      level: INFO
      handlers:
        - stdout
      qualname: zun
    logger_amqp:
      level: WARNING
      handlers: stderr
      qualname: amqp
    logger_amqplib:
      level: WARNING
      handlers: stderr
      qualname: amqplib
    logger_eventletstats:
      level: WARNING
      handlers: stderr
      qualname: eventlet.stats
    logger_iso8601:
      level: WARNING
      handlers: stderr
      qualname: iso8601
    logger_urllib3:
      level: WARNING
      handlers: stderr
      qualname: urllib3.connectionpool
    handler_null:
      class: logging.NullHandler
      formatter: default
      args: ()
    handler_stdout:
      class: StreamHandler
      args: (sys.stdout,)
      formatter: context
    handler_stderr:
      class: StreamHandler
      args: (sys.stderr,)
      formatter: context
    formatter_context:
      class: oslo_log.formatters.ContextFormatter
      datefmt: "%Y-%m-%d %H:%M:%S"
    formatter_default:
      format: "%(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
  policy: {}

tls:
  identity: false
  oslo_messaging: false
  oslo_db: false

manifests:
  certificates: false
  configmap_bin: true
  configmap_etc: true
  deployment_api: true
  deployment_wsproxy: true
  daemonset_compute: true
  daemonset_cni_daemon: true
  ingress_api: true
  job_bootstrap: false
  job_db_init: true
  job_db_sync: true
  job_db_drop: false
  job_image_repo_sync: true
  job_ks_endpoints: true
  job_ks_service: true
  job_ks_user: true
  job_rabbit_init: true
  network_policy: false
  pdb_api: true
  secret_db: true
  secret_keystone: true
  secret_rabbitmq: true
  secret_registry: true
  service_api: true
  service_ingress_api: false
  service_wsproxy: true